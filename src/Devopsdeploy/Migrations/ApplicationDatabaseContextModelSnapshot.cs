// <auto-generated />
using System;
using DevOpsDeploy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DevOpsDeploy.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    partial class ApplicationDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DevOpsDeploy.Models.Config", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("config");

                    b.HasData(
                        new
                        {
                            Id = "ReleaseRetentionCount",
                            Value = 2
                        });
                });

            modelBuilder.Entity("DevOpsDeploy.Models.Deployment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DeployedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnvironmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReleaseId");

                    b.ToTable("deployment");

                    b.HasData(
                        new
                        {
                            Id = "Deployment-1",
                            DeployedAt = new DateTime(2000, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentId = "Environment-1",
                            ReleaseId = "Release-1"
                        },
                        new
                        {
                            Id = "Deployment-2",
                            DeployedAt = new DateTime(2000, 1, 2, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentId = "Environment-1",
                            ReleaseId = "Release-2"
                        },
                        new
                        {
                            Id = "Deployment-3",
                            DeployedAt = new DateTime(2000, 1, 2, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentId = "Environment-2",
                            ReleaseId = "Release-1"
                        },
                        new
                        {
                            Id = "Deployment-4",
                            DeployedAt = new DateTime(2000, 1, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentId = "Environment-2",
                            ReleaseId = "Release-2"
                        },
                        new
                        {
                            Id = "Deployment-5",
                            DeployedAt = new DateTime(2000, 1, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentId = "Environment-1",
                            ReleaseId = "Release-5"
                        },
                        new
                        {
                            Id = "Deployment-6",
                            DeployedAt = new DateTime(2000, 1, 2, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentId = "Environment-1",
                            ReleaseId = "Release-6"
                        },
                        new
                        {
                            Id = "Deployment-7",
                            DeployedAt = new DateTime(2000, 1, 2, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentId = "Environment-2",
                            ReleaseId = "Release-6"
                        },
                        new
                        {
                            Id = "Deployment-8",
                            DeployedAt = new DateTime(2000, 1, 2, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentId = "Environment-1",
                            ReleaseId = "Release-7"
                        },
                        new
                        {
                            Id = "Deployment-9",
                            DeployedAt = new DateTime(2000, 1, 2, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentId = "Environment-1",
                            ReleaseId = "Release-6"
                        },
                        new
                        {
                            Id = "Deployment-10",
                            DeployedAt = new DateTime(2000, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EnvironmentId = "Environment-1",
                            ReleaseId = "Release-8"
                        });
                });

            modelBuilder.Entity("DevOpsDeploy.Models.Environment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("environment");

                    b.HasData(
                        new
                        {
                            Id = "Environment-1",
                            Name = "Staging"
                        },
                        new
                        {
                            Id = "Environment-2",
                            Name = "Production"
                        });
                });

            modelBuilder.Entity("DevOpsDeploy.Models.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("project");

                    b.HasData(
                        new
                        {
                            Id = "Project-1",
                            Name = "Random Quotes"
                        },
                        new
                        {
                            Id = "Project-2",
                            Name = "Pet Shop"
                        });
                });

            modelBuilder.Entity("DevOpsDeploy.Models.Release", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("release");

                    b.HasData(
                        new
                        {
                            Id = "Release-1",
                            Created = new DateTime(2000, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectId = "Project-1",
                            Version = "1.0.0"
                        },
                        new
                        {
                            Id = "Release-2",
                            Created = new DateTime(2000, 1, 2, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectId = "Project-1",
                            Version = "1.0.1"
                        },
                        new
                        {
                            Id = "Release-3",
                            Created = new DateTime(2000, 1, 2, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectId = "Project-1"
                        },
                        new
                        {
                            Id = "Release-4",
                            Created = new DateTime(2000, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectId = "Project-2",
                            Version = "1.0.0"
                        },
                        new
                        {
                            Id = "Release-5",
                            Created = new DateTime(2000, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectId = "Project-2",
                            Version = "1.0.1-ci1"
                        },
                        new
                        {
                            Id = "Release-6",
                            Created = new DateTime(2000, 1, 2, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectId = "Project-2",
                            Version = "1.0.2"
                        },
                        new
                        {
                            Id = "Release-7",
                            Created = new DateTime(2000, 1, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectId = "Project-2",
                            Version = "1.0.3"
                        },
                        new
                        {
                            Id = "Release-8",
                            Created = new DateTime(2000, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectId = "Project-2",
                            Version = "2.0.0"
                        });
                });

            modelBuilder.Entity("DevOpsDeploy.Models.Retention", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeploymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnvironmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReleaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DeploymentId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReleaseId");

                    b.ToTable("retention");
                });

            modelBuilder.Entity("DevOpsDeploy.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DevOpsDeploy.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Activated")
                        .HasColumnType("bit");

                    b.Property<string>("ActivationKey")
                        .HasColumnName("activation_key")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImageUrl")
                        .HasColumnName("image_url")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("LangKey")
                        .HasColumnName("lang_key")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ResetDate")
                        .HasColumnName("reset_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetKey")
                        .HasColumnName("reset_key")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DevOpsDeploy.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DevOpsDeploy.Models.Deployment", b =>
                {
                    b.HasOne("DevOpsDeploy.Models.Release", "Release")
                        .WithMany("Deployments")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevOpsDeploy.Models.Release", b =>
                {
                    b.HasOne("DevOpsDeploy.Models.Project", null)
                        .WithMany("Releases")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevOpsDeploy.Models.Retention", b =>
                {
                    b.HasOne("DevOpsDeploy.Models.Deployment", "Deployment")
                        .WithMany()
                        .HasForeignKey("DeploymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevOpsDeploy.Models.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevOpsDeploy.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevOpsDeploy.Models.Release", "Release")
                        .WithMany()
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevOpsDeploy.Models.UserRole", b =>
                {
                    b.HasOne("DevOpsDeploy.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevOpsDeploy.Models.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevOpsDeploy.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DevOpsDeploy.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DevOpsDeploy.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DevOpsDeploy.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DevOpsDeploy.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
