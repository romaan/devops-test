{"remainingRequest":"/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/node_modules/ts-loader/index.js??ref--4-3!/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/node_modules/eslint-loader/dist/cjs.js!/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/src/app/modules/account/password-reset/password-reset.reducer.ts","dependencies":[{"path":"/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/src/app/modules/account/password-reset/password-reset.reducer.ts","mtime":1596165326069},{"path":"/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHsgUkVRVUVTVCwgU1VDQ0VTUywgRkFJTFVSRSB9IGZyb20gJ2FwcC9zaGFyZWQvcmVkdWNlcnMvYWN0aW9uLXR5cGUudXRpbCc7CmV4cG9ydCBjb25zdCBBQ1RJT05fVFlQRVMgPSB7CiAgICBSRVNFVF9QQVNTV09SRF9JTklUOiAncGFzc3dvcmRSZXNldC9SRVNFVF9QQVNTV09SRF9JTklUJywKICAgIFJFU0VUX1BBU1NXT1JEX0ZJTklTSDogJ3Bhc3N3b3JkUmVzZXQvUkVTRVRfUEFTU1dPUkRfRklOSVNIJywKICAgIFJFU0VUOiAncGFzc3dvcmRSZXNldC9SRVNFVCcsCn07CmNvbnN0IGluaXRpYWxTdGF0ZSA9IHsKICAgIGxvYWRpbmc6IGZhbHNlLAogICAgcmVzZXRQYXNzd29yZFN1Y2Nlc3M6IGZhbHNlLAogICAgcmVzZXRQYXNzd29yZEZhaWx1cmU6IGZhbHNlLAp9OwovLyBSZWR1Y2VyCmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7CiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7CiAgICAgICAgY2FzZSBSRVFVRVNUKEFDVElPTl9UWVBFUy5SRVNFVF9QQVNTV09SRF9GSU5JU0gpOgogICAgICAgIGNhc2UgUkVRVUVTVChBQ1RJT05fVFlQRVMuUkVTRVRfUEFTU1dPUkRfSU5JVCk6CiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN0YXRlKSwgeyBsb2FkaW5nOiB0cnVlIH0pOwogICAgICAgIGNhc2UgRkFJTFVSRShBQ1RJT05fVFlQRVMuUkVTRVRfUEFTU1dPUkRfRklOSVNIKToKICAgICAgICBjYXNlIEZBSUxVUkUoQUNUSU9OX1RZUEVTLlJFU0VUX1BBU1NXT1JEX0lOSVQpOgogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsU3RhdGUpLCB7IGxvYWRpbmc6IGZhbHNlLCByZXNldFBhc3N3b3JkRmFpbHVyZTogdHJ1ZSB9KTsKICAgICAgICBjYXNlIFNVQ0NFU1MoQUNUSU9OX1RZUEVTLlJFU0VUX1BBU1NXT1JEX0ZJTklTSCk6CiAgICAgICAgY2FzZSBTVUNDRVNTKEFDVElPTl9UWVBFUy5SRVNFVF9QQVNTV09SRF9JTklUKToKICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaW5pdGlhbFN0YXRlKSwgeyBsb2FkaW5nOiBmYWxzZSwgcmVzZXRQYXNzd29yZFN1Y2Nlc3M6IHRydWUgfSk7CiAgICAgICAgY2FzZSBBQ1RJT05fVFlQRVMuUkVTRVQ6CiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsU3RhdGUpOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHJldHVybiBzdGF0ZTsKICAgIH0KfTsKY29uc3QgYXBpVXJsID0gJ2FwaS9hY2NvdW50L3Jlc2V0LXBhc3N3b3JkJzsKLy8gQWN0aW9ucwpleHBvcnQgY29uc3QgaGFuZGxlUGFzc3dvcmRSZXNldEluaXQgPSBtYWlsID0+ICh7CiAgICB0eXBlOiBBQ1RJT05fVFlQRVMuUkVTRVRfUEFTU1dPUkRfSU5JVCwKICAgIC8vIElmIHRoZSBjb250ZW50LXR5cGUgaXNuJ3Qgc2V0IHRoYXQgd2F5LCBheGlvcyB3aWxsIHRyeSB0byBlbmNvZGUgdGhlIGJvZHkgYW5kIHRodXMgbW9kaWZ5IHRoZSBkYXRhIHNlbnQgdG8gdGhlIHNlcnZlci4KICAgIHBheWxvYWQ6IGF4aW9zLnBvc3QoYCR7YXBpVXJsfS9pbml0YCwgbWFpbCwgeyBoZWFkZXJzOiB7IFsnQ29udGVudC1UeXBlJ106ICd0ZXh0L3BsYWluJyB9IH0pLAogICAgbWV0YTogewogICAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAnQ2hlY2sgeW91ciBlbWFpbHMgZm9yIGRldGFpbHMgb24gaG93IHRvIHJlc2V0IHlvdXIgcGFzc3dvcmQuJywKICAgIH0sCn0pOwpleHBvcnQgY29uc3QgaGFuZGxlUGFzc3dvcmRSZXNldEZpbmlzaCA9IChrZXksIG5ld1Bhc3N3b3JkKSA9PiAoewogICAgdHlwZTogQUNUSU9OX1RZUEVTLlJFU0VUX1BBU1NXT1JEX0ZJTklTSCwKICAgIHBheWxvYWQ6IGF4aW9zLnBvc3QoYCR7YXBpVXJsfS9maW5pc2hgLCB7IGtleSwgbmV3UGFzc3dvcmQgfSksCiAgICBtZXRhOiB7CiAgICAgICAgc3VjY2Vzc01lc3NhZ2U6ICc8c3Ryb25nPllvdXIgcGFzc3dvcmQgaGFzIGJlZW4gcmVzZXQuPC9zdHJvbmc+IFBsZWFzZSAnLAogICAgfSwKfSk7CmV4cG9ydCBjb25zdCByZXNldCA9ICgpID0+ICh7CiAgICB0eXBlOiBBQ1RJT05fVFlQRVMuUkVTRVQsCn0pOwo="},{"version":3,"file":"/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/src/app/modules/account/password-reset/password-reset.reducer.ts","sourceRoot":"","sources":["/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/node_modules/eslint-loader/dist/cjs.js!/Users/romaan/interview-test/src/Devopsdeploy/ClientApp/src/app/modules/account/password-reset/password-reset.reducer.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,sCAAsC,CAAC;AAEjF,MAAM,CAAC,MAAM,YAAY,GAAG;IAC1B,mBAAmB,EAAE,mCAAmC;IACxD,qBAAqB,EAAE,qCAAqC;IAC5D,KAAK,EAAE,qBAAqB;CAC7B,CAAC;AAEF,MAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,oBAAoB,EAAE,KAAK;IAC3B,oBAAoB,EAAE,KAAK;CAC5B,CAAC;AAIF,UAAU;AACV,eAAe,CAAC,QAA4B,YAAY,EAAE,MAAM,EAAsB,EAAE;IACtF,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,OAAO,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;QACjD,KAAK,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC;YAC5C,uCACK,KAAK,KACR,OAAO,EAAE,IAAI,IACb;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;QACjD,KAAK,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC;YAC5C,uCACK,YAAY,KACf,OAAO,EAAE,KAAK,EACd,oBAAoB,EAAE,IAAI,IAC1B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;QACjD,KAAK,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC;YAC5C,uCACK,YAAY,KACf,OAAO,EAAE,KAAK,EACd,oBAAoB,EAAE,IAAI,IAC1B;QACJ,KAAK,YAAY,CAAC,KAAK;YACrB,yBACK,YAAY,EACf;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,CAAC;AAEF,MAAM,MAAM,GAAG,4BAA4B,CAAC;AAE5C,UAAU;AACV,MAAM,CAAC,MAAM,uBAAuB,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;IAC9C,IAAI,EAAE,YAAY,CAAC,mBAAmB;IACtC,yHAAyH;IACzH,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,OAAO,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,cAAc,CAAC,EAAE,YAAY,EAAE,EAAE,CAAC;IAC5F,IAAI,EAAE;QACJ,cAAc,EAAE,8DAA8D;KAC/E;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,GAAG,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;IAC9D,IAAI,EAAE,YAAY,CAAC,qBAAqB;IACxC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,SAAS,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC;IAC7D,IAAI,EAAE;QACJ,cAAc,EAAE,wDAAwD;KACzE;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC;IAC1B,IAAI,EAAE,YAAY,CAAC,KAAK;CACzB,CAAC,CAAC","sourcesContent":["import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\n\nexport const ACTION_TYPES = {\n  RESET_PASSWORD_INIT: 'passwordReset/RESET_PASSWORD_INIT',\n  RESET_PASSWORD_FINISH: 'passwordReset/RESET_PASSWORD_FINISH',\n  RESET: 'passwordReset/RESET',\n};\n\nconst initialState = {\n  loading: false,\n  resetPasswordSuccess: false,\n  resetPasswordFailure: false,\n};\n\nexport type PasswordResetState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: PasswordResetState = initialState, action): PasswordResetState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.RESET_PASSWORD_FINISH):\n    case REQUEST(ACTION_TYPES.RESET_PASSWORD_INIT):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.RESET_PASSWORD_FINISH):\n    case FAILURE(ACTION_TYPES.RESET_PASSWORD_INIT):\n      return {\n        ...initialState,\n        loading: false,\n        resetPasswordFailure: true,\n      };\n    case SUCCESS(ACTION_TYPES.RESET_PASSWORD_FINISH):\n    case SUCCESS(ACTION_TYPES.RESET_PASSWORD_INIT):\n      return {\n        ...initialState,\n        loading: false,\n        resetPasswordSuccess: true,\n      };\n    case ACTION_TYPES.RESET:\n      return {\n        ...initialState,\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = 'api/account/reset-password';\n\n// Actions\nexport const handlePasswordResetInit = mail => ({\n  type: ACTION_TYPES.RESET_PASSWORD_INIT,\n  // If the content-type isn't set that way, axios will try to encode the body and thus modify the data sent to the server.\n  payload: axios.post(`${apiUrl}/init`, mail, { headers: { ['Content-Type']: 'text/plain' } }),\n  meta: {\n    successMessage: 'Check your emails for details on how to reset your password.',\n  },\n});\n\nexport const handlePasswordResetFinish = (key, newPassword) => ({\n  type: ACTION_TYPES.RESET_PASSWORD_FINISH,\n  payload: axios.post(`${apiUrl}/finish`, { key, newPassword }),\n  meta: {\n    successMessage: '<strong>Your password has been reset.</strong> Please ',\n  },\n});\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET,\n});\n"]}]}